#!/usr/bin/env python3
"""
Bulk Import Devices for PulsarNet

This script reads a CSV or JSON file containing device definitions (example template provided as bulk_import_template.csv or bulk_import_template.json)
and imports the devices into the PulsarNet application.

Usage:
    python bulk_import.py [template_file]

If no template file is provided, it defaults to 'bulk_import_template.csv'.
"""

import asyncio
import json
import csv
import sys
import os
import logging

from pulsarnet.device_management.device_manager import DeviceManager
from pulsarnet.device_management.connection_types import DeviceConnectionType


def load_devices_from_json(file_path):
    with open(file_path, 'r') as f:
        data = json.load(f)
    return data.get('devices', [])


def load_devices_from_csv(file_path):
    devices = []
    with open(file_path, 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            # Convert and clean fields for port
            port_str = row.get('port', '22').strip()
            row['port'] = int(port_str) if port_str else 22

            # Convert and clean fields for jump_port
            if 'jump_port' in row:
                jump_port_str = row.get('jump_port', '').strip()
                row['jump_port'] = int(jump_port_str) if jump_port_str else 22

            if 'use_jump_server' in row:
                row['use_jump_server'] = row['use_jump_server'].strip().lower() == 'true'
            if 'use_keys' in row:
                row['use_keys'] = row['use_keys'].strip().lower() == 'true'
            
            # Process connection type
            if 'connection_type' in row:
                conn_type = row['connection_type'].strip().lower()
                # Set use_jump_server flag based on connection type
                if conn_type == 'jump_host' or conn_type.startswith('jump_'):
                    row['use_jump_server'] = True
                    
                    # Ensure jump host details are properly set
                    # These fields must match exactly what Device.from_dict expects
                    if row.get('jump_server'):
                        # Make sure all jump host fields are present with non-empty values
                        if not row.get('jump_username'):
                            logging.warning(f"Warning: jump_username not provided for {row.get('name')}")
                        
                        if not row.get('jump_password'):
                            logging.warning(f"Warning: jump_password not provided for {row.get('name')}")
                        
                        # Set jump_protocol explicitly
                        jump_protocol = row.get('jump_protocol', '').strip().lower()
                        if not jump_protocol:
                            jump_protocol = 'ssh'  # Default to SSH
                        row['jump_protocol'] = jump_protocol
                        
                        # Set jump_port explicitly
                        jump_port = row.get('jump_port', '')
                        if not jump_port:
                            jump_port = 22  # Default to port 22
                        row['jump_port'] = int(jump_port) if isinstance(jump_port, str) else jump_port
                    else:
                        logging.warning(f"Warning: jump_server not provided for {row.get('name')} but connection_type is {conn_type}")
                    
                    # Set connection_type string based on protocol combinations
                    device_protocol = row.get('protocol', 'ssh').strip().lower()
                    jump_protocol = row.get('jump_protocol', 'ssh').strip().lower()
                    
                    if jump_protocol == 'telnet' and device_protocol == 'telnet':
                        row['connection_type'] = 'jump_telnet/telnet'
                    elif jump_protocol == 'telnet' and device_protocol == 'ssh':
                        row['connection_type'] = 'jump_telnet/ssh'
                    elif jump_protocol == 'ssh' and device_protocol == 'telnet':
                        row['connection_type'] = 'jump_ssh/telnet'
                    else:  # Default: SSH jump host to SSH device
                        row['connection_type'] = 'jump_ssh/ssh'
                elif conn_type == 'direct_ssh' or conn_type == 'ssh':
                    row['connection_type'] = 'direct_ssh'
                    row['use_jump_server'] = False
                elif conn_type == 'direct_telnet' or conn_type == 'telnet':
                    row['connection_type'] = 'direct_telnet'
                    row['use_jump_server'] = False
            
            # Strip whitespace from all string fields
            for key, value in row.items():
                if isinstance(value, str):
                    row[key] = value.strip()
            
            # Print a summary of jump host details if this is a jump host device
            if row.get('use_jump_server'):
                logging.info(f"Jump host device: {row.get('name')}")
                logging.info(f"  - jump_server: {row.get('jump_server')}")
                logging.info(f"  - jump_host_name: {row.get('jump_host_name')}")
                logging.info(f"  - jump_username: {row.get('jump_username')}")
                logging.info(f"  - jump_protocol: {row.get('jump_protocol')}")
                logging.info(f"  - jump_port: {row.get('jump_port')}")
                logging.info(f"  - connection_type: {row.get('connection_type')}")
            
            # Validate required fields for jump host
            if row.get('use_jump_server') and not all([row.get('jump_server'), row.get('jump_username'), row.get('jump_password')]):
                logging.error(f"Error: Missing jump host details for {row.get('name')}")
                continue
            
            # Log the final processed row
            logging.debug(f"Processed row for device {row.get('name')}: {row}")
            
            devices.append(row)
    return devices


def generate_template_csv():
    """Generate a template CSV file if it doesn't exist."""
    template_file = 'bulk_import_template.csv'
    if os.path.exists(template_file):
        return
    
    with open(template_file, 'w', newline='') as f:
        writer = csv.writer(f)
        # Write header
        writer.writerow([
            'name', 'ip_address', 'device_type', 'username', 'password',
            'enable_password', 'port', 'protocol', 'connection_type',
            'jump_server', 'jump_host_name', 'jump_username', 'jump_password',
            'jump_protocol', 'jump_port', 'use_keys', 'key_file', 'groups'
        ])
        
        # Example 1: Direct SSH Device
        writer.writerow([
            'Router-SSH', '192.168.1.10', 'cisco_ios', 'admin', 'admin123',
            'enable123', '22', 'ssh', 'direct_ssh',
            '', '', '', '', '', '', 'false', '', 'Core,Production'
        ])
        
        # Example 2: Direct Telnet Device
        writer.writerow([
            'Switch-Telnet', '192.168.1.20', 'hp_comware', 'admin', 'admin123',
            'enable123', '23', 'telnet', 'direct_telnet',
            '', '', '', '', '', '', 'false', '', 'Access,Management'
        ])
        
        # Example 3: Jump Host - Telnet Device
        writer.writerow([
            'Firewall-Jump-Telnet', '10.0.0.5', 'checkpoint_gaia', 'admin', 'admin123',
            'enable123', '23', 'telnet', 'jump_host',
            '192.168.2.1', 'JumpHost1', 'jumper', 'jump123', 'telnet', '23',
            'false', '', 'Security'
        ])
        
        # Example 4: Jump Host - SSH Device
        writer.writerow([
            'Router-Jump-SSH', '10.0.0.6', 'cisco_ios', 'admin', 'admin123',
            'enable123', '22', 'ssh', 'jump_host',
            '192.168.2.2', 'JumpHost2', 'jumper2', 'jump321', 'ssh', '22',
            'true', '/path/to/ssh/key.pem', 'Core,Edge'
        ])
    
    print(f"Template CSV generated at {template_file}")


async def main():
    # Generate template if it doesn't exist
    generate_template_csv()
    
    # Determine the template file name (default: bulk_import_template.csv)
    template_file = 'bulk_import_template.csv'
    if len(sys.argv) > 1:
        template_file = sys.argv[1]
        
    if not os.path.exists(template_file):
        print(f"Template file '{template_file}' not found.")
        print(f"A template has been generated as 'bulk_import_template.csv'.")
        sys.exit(1)
    
    devices_config = []
    if template_file.lower().endswith('.csv'):
        devices_config = load_devices_from_csv(template_file)
    else:
        devices_config = load_devices_from_json(template_file)
    
    if not devices_config:
        print("No devices found in the template file.")
        sys.exit(1)
    
    device_manager = DeviceManager()
    results = await device_manager.bulk_upload_devices(devices_config)
    
    for device_name, success, message in results:
        status = "Success" if success else "Failed"
        print(f"Device: {device_name} - {status}: {message}")


if __name__ == '__main__':
    asyncio.run(main())
